{"version":3,"file":"index.js","sources":["index.ts"],"sourcesContent":["import {documentEventHandler} from '@sanity/functions'\nimport {createClient} from '@sanity/client'\nimport prettier from 'prettier'\n\nexport const handler = documentEventHandler(async ({context, event}) => {\n  console.log('Begin formatting code function...')\n\n  const client = createClient({\n    ...context.clientOptions,\n    useCdn: false,\n    apiVersion: '2025-08-21',\n  })\n\n  if (!event.data.content) {\n    console.log('No content')\n    return\n  }\n\n  const codeBlocks = event.data.content.filter(\n    (block) => block._type === 'code',\n  )\n\n  if (!codeBlocks.length) {\n    console.log('No code blocks')\n    return\n  }\n\n  try {\n    const formattedCodeBlocks = await Promise.all(\n      codeBlocks.map(async (block) => {\n        if (block._type !== 'code' || !block.code) {\n          return block\n        }\n\n        try {\n          // Determine parser based on language\n          const parser = getParserForLanguage(block.language)\n\n          // Format the code using Prettier\n          const formattedCode = await prettier.format(block.code, {\n            parser,\n            semi: false,\n            singleQuote: true,\n            trailingComma: 'es5',\n            printWidth: 60,\n            tabWidth: 2,\n            useTabs: false,\n          })\n\n          return {\n            ...block,\n            code: formattedCode,\n          }\n        } catch (formatError) {\n          console.warn(\n            `Failed to format code block ${block._key}:`,\n            formatError,\n          )\n          // Return original block if formatting fails\n          return block\n        }\n      }),\n    )\n\n    // Find changed code blocks by comparing formatted code with original code\n    const changedCodeBlocks = formattedCodeBlocks.filter((formattedBlock) => {\n      const originalBlock = event.data.content.find(\n        (block) => block._key === formattedBlock._key,\n      )\n      return (\n        originalBlock &&\n        originalBlock._type === 'code' &&\n        formattedBlock.code !== originalBlock.code\n      )\n    })\n\n    if (!changedCodeBlocks.length) {\n      console.log('No changed code blocks')\n      return\n    }\n\n    const transaction = client.transaction()\n    for (const block of changedCodeBlocks) {\n      const patch = client.patch(event.data._id).set({\n        [`content[_key==\"${block._key}\"].code`]: block.code,\n      })\n      transaction.patch(patch)\n    }\n    await transaction.commit()\n    console.log(\n      `Formatted ${changedCodeBlocks.length === 1 ? '1 code block' : `${changedCodeBlocks.length} code blocks`}`,\n    )\n  } catch (error) {\n    console.error('Error formatting code blocks:', error)\n    throw error\n  }\n})\n\nfunction getParserForLanguage(language?: string): string {\n  if (!language) return 'babel'\n\n  const languageMap: Record<string, string> = {\n    tsx: 'typescript',\n    ts: 'typescript',\n    jsx: 'babel',\n    js: 'babel',\n    json: 'json',\n    css: 'css',\n    scss: 'scss',\n    less: 'less',\n    html: 'html',\n    vue: 'vue',\n    yaml: 'yaml',\n    markdown: 'markdown',\n    md: 'markdown',\n  }\n\n  return languageMap[language] || 'babel'\n}\n"],"names":[],"mappings":";;;AAIO,MAAM,UAAU,qBAAqB,OAAO,EAAC,SAAS,YAAW;AACtE,UAAQ,IAAI,mCAAmC;AAE/C,QAAM,SAAS,aAAa;AAAA,IAC1B,GAAG,QAAQ;AAAA,IACX,QAAQ;AAAA,IACR,YAAY;AAAA,EAAA,CACb;AAED,MAAI,CAAC,MAAM,KAAK,SAAS;AACvB,YAAQ,IAAI,YAAY;AACxB;AAAA,EACF;AAEA,QAAM,aAAa,MAAM,KAAK,QAAQ;AAAA,IACpC,CAAC,UAAU,MAAM,UAAU;AAAA,EAAA;AAG7B,MAAI,CAAC,WAAW,QAAQ;AACtB,YAAQ,IAAI,gBAAgB;AAC5B;AAAA,EACF;AAEA,MAAI;AACF,UAAM,sBAAsB,MAAM,QAAQ;AAAA,MACxC,WAAW,IAAI,OAAO,UAAU;AAC9B,YAAI,MAAM,UAAU,UAAU,CAAC,MAAM,MAAM;AACzC,iBAAO;AAAA,QACT;AAEA,YAAI;AAEF,gBAAM,SAAS,qBAAqB,MAAM,QAAQ;AAGlD,gBAAM,gBAAgB,MAAM,SAAS,OAAO,MAAM,MAAM;AAAA,YACtD;AAAA,YACA,MAAM;AAAA,YACN,aAAa;AAAA,YACb,eAAe;AAAA,YACf,YAAY;AAAA,YACZ,UAAU;AAAA,YACV,SAAS;AAAA,UAAA,CACV;AAED,iBAAO;AAAA,YACL,GAAG;AAAA,YACH,MAAM;AAAA,UAAA;AAAA,QAEV,SAAS,aAAa;AACpB,kBAAQ;AAAA,YACN,+BAA+B,MAAM,IAAI;AAAA,YACzC;AAAA,UAAA;AAGF,iBAAO;AAAA,QACT;AAAA,MACF,CAAC;AAAA,IAAA;AAIH,UAAM,oBAAoB,oBAAoB,OAAO,CAAC,mBAAmB;AACvE,YAAM,gBAAgB,MAAM,KAAK,QAAQ;AAAA,QACvC,CAAC,UAAU,MAAM,SAAS,eAAe;AAAA,MAAA;AAE3C,aACE,iBACA,cAAc,UAAU,UACxB,eAAe,SAAS,cAAc;AAAA,IAE1C,CAAC;AAED,QAAI,CAAC,kBAAkB,QAAQ;AAC7B,cAAQ,IAAI,wBAAwB;AACpC;AAAA,IACF;AAEA,UAAM,cAAc,OAAO,YAAA;AAC3B,eAAW,SAAS,mBAAmB;AACrC,YAAM,QAAQ,OAAO,MAAM,MAAM,KAAK,GAAG,EAAE,IAAI;AAAA,QAC7C,CAAC,kBAAkB,MAAM,IAAI,SAAS,GAAG,MAAM;AAAA,MAAA,CAChD;AACD,kBAAY,MAAM,KAAK;AAAA,IACzB;AACA,UAAM,YAAY,OAAA;AAClB,YAAQ;AAAA,MACN,aAAa,kBAAkB,WAAW,IAAI,iBAAiB,GAAG,kBAAkB,MAAM,cAAc;AAAA,IAAA;AAAA,EAE5G,SAAS,OAAO;AACd,YAAQ,MAAM,iCAAiC,KAAK;AACpD,UAAM;AAAA,EACR;AACF,CAAC;AAED,SAAS,qBAAqB,UAA2B;AACvD,MAAI,CAAC,SAAU,QAAO;AAEtB,QAAM,cAAsC;AAAA,IAC1C,KAAK;AAAA,IACL,IAAI;AAAA,IACJ,KAAK;AAAA,IACL,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,KAAK;AAAA,IACL,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,KAAK;AAAA,IACL,MAAM;AAAA,IACN,UAAU;AAAA,IACV,IAAI;AAAA,EAAA;AAGN,SAAO,YAAY,QAAQ,KAAK;AAClC;"}